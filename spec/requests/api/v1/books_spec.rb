require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/api/v1/books', type: :request do
  let! :pdf_file do
    fixture_file_upload('pdf/adventures_of_huckleberry_finn.pdf', 'application/pdf')
  end
  # This should return the minimal set of attributes required to create a valid
  # Book. As you add validations to Book, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: 'Adventures of Huckleberry Finn',
      author: 'Mark Twain',
      summary: 'A nice book about a couple of kids.',
      pdf: pdf_file
    }
  end

  let(:invalid_attributes) do
    {
      title: 'Adventures of Huckleberry Finn',
      author: 'Mark Twain',
      summary: 'A nice book about a couple of kids.'
    }
  end

  before do
    sign_in(User.create!(email: 'test@example.com', password: 'password', password_confirmation: 'password'))
  end

  describe 'GET /index.json' do
    it 'renders a successful response' do
      Book.create! valid_attributes
      get api_v1_books_url, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show.json' do
    it 'renders a successful response' do
      book = Book.create! valid_attributes
      get api_v1_book_url(book), as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create.json' do
    before do
      stub_request(:post, 'https://api.openai.com/v1/embeddings')
        .to_return(status: 200,
                   body: file_fixture('openAI/responses/embeddings/adventures_of_huckleberry_finn_page_embeddings.json'),
                   headers: {})
    end

    context 'with valid parameters' do
      it 'creates a new Book' do
        Sidekiq::Testing.inline! do
          expect do
            post api_v1_books_url, params: { book: valid_attributes }, as: :json
          end.to change(Book, :count).by(1)
        end
      end

      it 'responds with success to the created book' do
        post api_v1_books_url, params: { book: valid_attributes }, as: :json
        expect(response).to have_http_status(:created)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Book' do
        expect do
          post api_v1_books_url, params: { book: invalid_attributes }, as: :json
        end.not_to change(Book, :count)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post api_v1_books_url, params: { book: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          title: 'The Hitchhiker\'s Guide to the Galaxy',
          author: 'Douglas Adams',
          summary: 'The answer to life, the universe, and everything, is 42.'
        }
      end

      it 'updates the requested book' do
        book = Book.create! valid_attributes
        patch api_v1_book_url(book), params: { book: new_attributes }, as: :json
        book.reload
        expect(book.title).to eq('The Hitchhiker\'s Guide to the Galaxy')
        expect(book.author).to eq('Douglas Adams')
        expect(book.summary).to eq('The answer to life, the universe, and everything, is 42.')
      end

      it 'updates to the book are successfull' do
        book = Book.create! valid_attributes
        patch api_v1_book_url(book), params: { book: new_attributes }, as: :json
        book.reload
        expect(response).to have_http_status(:ok)
      end
    end

    context 'with invalid parameters' do
      let(:bad_attributes) do
        {
          title: '',
          author: '',
          summary: ''
        }
      end

      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        book = Book.create! valid_attributes
        patch api_v1_book_url(book), params: { book: bad_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested book' do
      book = Book.create! valid_attributes
      expect do
        delete api_v1_book_url(book), as: :json
      end.to change(Book, :count).by(-1)
    end

    it 'returns no content' do
      book = Book.create! valid_attributes
      delete api_v1_book_url(book), as: :json
      expect(response).to have_http_status(:no_content)
    end
  end
end
